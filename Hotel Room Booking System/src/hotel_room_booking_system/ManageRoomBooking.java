package hotel_room_booking_system;

import java.awt.print.*;
import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;
import javax.swing.*;
import javax.swing.table.*;

public class ManageRoomBooking extends javax.swing.JFrame {

    /**
     * Creates new form ManageRoomBooking
     */
    public ManageRoomBooking() {
        initComponents();
        DisplayData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        pnl_1 = new javax.swing.JPanel();
        lbl_atlantis_hotel = new javax.swing.JLabel();
        lbl_hotel_room_booking_system = new javax.swing.JLabel();
        lbl_manage_room_booking = new javax.swing.JLabel();
        lbl_welcome_back_staff = new javax.swing.JLabel();
        pnl_2 = new javax.swing.JPanel();
        lbl_check_in_date = new javax.swing.JLabel();
        lbl_check_out_date = new javax.swing.JLabel();
        lbl_room_id = new javax.swing.JLabel();
        lbl_booking_id = new javax.swing.JLabel();
        lbl_name = new javax.swing.JLabel();
        lbl_ic_passport = new javax.swing.JLabel();
        lbl_contact_number = new javax.swing.JLabel();
        lbl_email = new javax.swing.JLabel();
        lbl_days_of_stay = new javax.swing.JLabel();
        txt_days_of_stay = new javax.swing.JTextField();
        txt_email = new javax.swing.JTextField();
        txt_contact_number = new javax.swing.JTextField();
        txt_ic_passport = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        txt_booking_id = new javax.swing.JTextField();
        cbo_room_id = new javax.swing.JComboBox<>();
        btn_refresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_customer_room_booking = new javax.swing.JTable();
        txt_search = new javax.swing.JTextField();
        lbl_search = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_receipt = new javax.swing.JTextArea();
        btn_generate_receipt = new javax.swing.JButton();
        btn_clear_receipt = new javax.swing.JButton();
        btn_print_receipt = new javax.swing.JButton();
        txt_check_in_date = new com.toedter.calendar.JDateChooser();
        txt_check_out_date = new com.toedter.calendar.JDateChooser();
        pnl_3 = new javax.swing.JPanel();
        btn_add = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        staff_menu_bar = new javax.swing.JMenuBar();
        menu_navigate = new javax.swing.JMenu();
        menu_item_logout = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu3.setText("jMenu3");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Staff - Manage Room Booking");
        setResizable(false);

        pnl_1.setBackground(new java.awt.Color(51, 71, 91));
        pnl_1.setToolTipText("");

        lbl_atlantis_hotel.setFont(new java.awt.Font("Palatino", 1, 36)); // NOI18N
        lbl_atlantis_hotel.setForeground(new java.awt.Color(255, 255, 255));
        lbl_atlantis_hotel.setText("Atlantis Hotel");

        lbl_hotel_room_booking_system.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lbl_hotel_room_booking_system.setForeground(new java.awt.Color(255, 255, 255));
        lbl_hotel_room_booking_system.setText("Hotel Room Booking System");

        lbl_manage_room_booking.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lbl_manage_room_booking.setForeground(new java.awt.Color(255, 255, 255));
        lbl_manage_room_booking.setText("Manage Room Booking");
        lbl_manage_room_booking.setName("manage_staff"); // NOI18N

        lbl_welcome_back_staff.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lbl_welcome_back_staff.setForeground(new java.awt.Color(255, 255, 255));
        lbl_welcome_back_staff.setText("Welcome back, staff!");
        lbl_welcome_back_staff.setName("manage_staff"); // NOI18N

        javax.swing.GroupLayout pnl_1Layout = new javax.swing.GroupLayout(pnl_1);
        pnl_1.setLayout(pnl_1Layout);
        pnl_1Layout.setHorizontalGroup(
            pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_1Layout.createSequentialGroup()
                        .addComponent(lbl_atlantis_hotel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_welcome_back_staff))
                    .addGroup(pnl_1Layout.createSequentialGroup()
                        .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_hotel_room_booking_system)
                            .addComponent(lbl_manage_room_booking))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_1Layout.setVerticalGroup(
            pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_atlantis_hotel)
                    .addComponent(lbl_welcome_back_staff))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_hotel_room_booking_system)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_manage_room_booking)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_2.setBackground(new java.awt.Color(85, 98, 113));

        lbl_check_in_date.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_check_in_date.setForeground(new java.awt.Color(255, 255, 255));
        lbl_check_in_date.setText("Check-In Date:");

        lbl_check_out_date.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_check_out_date.setForeground(new java.awt.Color(255, 255, 255));
        lbl_check_out_date.setText("Check-Out Date:");

        lbl_room_id.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_room_id.setForeground(new java.awt.Color(255, 255, 255));
        lbl_room_id.setText("Room ID:");

        lbl_booking_id.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_booking_id.setForeground(new java.awt.Color(255, 255, 255));
        lbl_booking_id.setText("Booking ID:");

        lbl_name.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_name.setForeground(new java.awt.Color(255, 255, 255));
        lbl_name.setText("Name:");

        lbl_ic_passport.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_ic_passport.setForeground(new java.awt.Color(255, 255, 255));
        lbl_ic_passport.setText("IC / Passport:");

        lbl_contact_number.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_contact_number.setForeground(new java.awt.Color(255, 255, 255));
        lbl_contact_number.setText("Contact Number:");

        lbl_email.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_email.setForeground(new java.awt.Color(255, 255, 255));
        lbl_email.setText("Email:");

        lbl_days_of_stay.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_days_of_stay.setForeground(new java.awt.Color(255, 255, 255));
        lbl_days_of_stay.setText("Days of Stay:");

        txt_days_of_stay.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_email.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_contact_number.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_ic_passport.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_name.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_booking_id.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        cbo_room_id.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cbo_room_id.setMaximumRowCount(10);
        cbo_room_id.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a room...", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210" }));

        btn_refresh.setBackground(new java.awt.Color(255, 255, 255));
        btn_refresh.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        tbl_customer_room_booking.setBackground(new java.awt.Color(229, 229, 229));
        tbl_customer_room_booking.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tbl_customer_room_booking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_customer_room_booking.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tbl_customer_room_booking.setRowHeight(30);
        tbl_customer_room_booking.setSelectionBackground(new java.awt.Color(0, 102, 153));
        tbl_customer_room_booking.getTableHeader().setReorderingAllowed(false);
        tbl_customer_room_booking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_customer_room_bookingMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_customer_room_booking);

        txt_search.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        lbl_search.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_search.setForeground(new java.awt.Color(255, 255, 255));
        lbl_search.setText("Search:");

        txt_receipt.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        txt_receipt.setEnabled(false);
        jScrollPane2.setViewportView(txt_receipt);

        btn_generate_receipt.setBackground(new java.awt.Color(255, 255, 255));
        btn_generate_receipt.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_generate_receipt.setText("Generate Receipt");
        btn_generate_receipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generate_receiptActionPerformed(evt);
            }
        });

        btn_clear_receipt.setBackground(new java.awt.Color(255, 255, 255));
        btn_clear_receipt.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_clear_receipt.setText("Clear");
        btn_clear_receipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clear_receiptActionPerformed(evt);
            }
        });

        btn_print_receipt.setBackground(new java.awt.Color(255, 255, 255));
        btn_print_receipt.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_print_receipt.setText("Print");
        btn_print_receipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_print_receiptActionPerformed(evt);
            }
        });

        txt_check_in_date.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        txt_check_out_date.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        javax.swing.GroupLayout pnl_2Layout = new javax.swing.GroupLayout(pnl_2);
        pnl_2.setLayout(pnl_2Layout);
        pnl_2Layout.setHorizontalGroup(
            pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_2Layout.createSequentialGroup()
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_contact_number)
                            .addComponent(lbl_email)
                            .addComponent(lbl_booking_id)
                            .addComponent(lbl_name)
                            .addComponent(lbl_ic_passport)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_check_out_date, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_room_id, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_days_of_stay, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_check_in_date, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(18, 18, 18)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_booking_id, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_ic_passport, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_contact_number, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_days_of_stay, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbo_room_id, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_check_in_date, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_check_out_date, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addComponent(lbl_search)
                        .addGap(18, 18, 18)
                        .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addComponent(btn_generate_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_print_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_clear_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        pnl_2Layout.setVerticalGroup(
            pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_2Layout.createSequentialGroup()
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_generate_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_clear_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_print_receipt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_search)
                            .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_booking_id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_booking_id))))
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)))
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_name))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_ic_passport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_ic_passport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_contact_number, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_contact_number))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_email))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_check_in_date)
                            .addComponent(txt_check_in_date, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_check_out_date, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_check_out_date))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbo_room_id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_room_id))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_days_of_stay, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_days_of_stay))))
                .addGap(10, 10, 10))
        );

        pnl_3.setBackground(new java.awt.Color(131, 143, 154));

        btn_add.setBackground(new java.awt.Color(255, 255, 255));
        btn_add.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(255, 255, 255));
        btn_edit.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_edit.setText("Edit");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(255, 255, 255));
        btn_delete.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setBackground(new java.awt.Color(255, 255, 255));
        btn_clear.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_3Layout = new javax.swing.GroupLayout(pnl_3);
        pnl_3.setLayout(pnl_3Layout);
        pnl_3Layout.setHorizontalGroup(
            pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_3Layout.setVerticalGroup(
            pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        menu_navigate.setText("File");

        menu_item_logout.setText("Logout");
        menu_item_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_logoutActionPerformed(evt);
            }
        });
        menu_navigate.add(menu_item_logout);

        staff_menu_bar.add(menu_navigate);

        setJMenuBar(staff_menu_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnl_3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    // Create file if file does not exist
    private void CreateFile() {
        try {
            FileWriter file_writer = new FileWriter("customer_room_booking.txt", true);
            file_writer.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to create new file, please try again.", "Create Failed", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    // Display customer room booking data to table
    private void DisplayData() {
        try {
            CreateFile();
            
            FileReader file_reader = new FileReader("customer_room_booking.txt");
            BufferedReader buffered_reader = new BufferedReader(file_reader);
            
            // Set column
            Object[] columns = {"Booking ID", "Name", "IC Passport", "Contact Number", "Email", "Check-In Date", "Check-Out Date", "Room ID", "Days of Stay"};
            DefaultTableModel table_model = (DefaultTableModel)tbl_customer_room_booking.getModel();
            table_model.setColumnIdentifiers(columns);
            tbl_customer_room_booking.setModel(table_model);
            
            Object[] data_row = buffered_reader.lines().toArray();
            table_model.setRowCount(0);
            
            // Loop and display data
            for (int booking_data = 0; booking_data < data_row.length; booking_data++) {
                String row = data_row[booking_data].toString();
                String[] data = row.split("/");
                table_model.addRow(data);
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to display customer room booking record, please try again.", "Display Failed", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    // Clear all data in textfields & combobox
    public void ClearData() {
        txt_booking_id.setText("");
        txt_name.setText("");
        txt_ic_passport.setText("");
        txt_contact_number.setText("");
        txt_email.setText("");
        txt_check_in_date.setDate(null);
        txt_check_out_date.setDate(null);
        cbo_room_id.setSelectedIndex(0);
        txt_days_of_stay.setText("");
        txt_search.setText("");
    }
    
    
    // Add customer room booking record button
    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        try {
            String booking_id = txt_booking_id.getText();
            String name = txt_name.getText();
            String ic_passport = txt_ic_passport.getText();
            String contact_number = txt_contact_number.getText();
            String email = txt_email.getText();
            SimpleDateFormat date_format = new SimpleDateFormat("dd-MM-yyyy");
            String check_in_date = date_format.format(txt_check_in_date.getDate());
            String check_out_date = date_format.format(txt_check_out_date.getDate());
            String room_id = cbo_room_id.getSelectedItem().toString();
            String days_of_stay = txt_days_of_stay.getText();

            // Booking ID input validation
            String booking_id_pattern_type = "^[0-9]{1,5}$";
            Pattern booking_id_pattern = Pattern.compile(booking_id_pattern_type);
            Matcher booking_id_matcher = booking_id_pattern.matcher(txt_booking_id.getText());
            
            // Name input validation
            String name_pattern_type = "^[a-zA-Z. ]{1,50}$";
            Pattern name_pattern = Pattern.compile(name_pattern_type);
            Matcher name_matcher = name_pattern.matcher(txt_name.getText());
        
            // IC / Passport input validation
            String ic_passport_pattern_type = "^[a-zA-Z0-9]{12,20}$";
            Pattern ic_passport_pattern = Pattern.compile(ic_passport_pattern_type);
            Matcher ic_passport_matcher = ic_passport_pattern.matcher(txt_ic_passport.getText());
        
            // Contact number input validation
            String contact_number_pattern_type = "^[0-9]{10,11}$";
            Pattern contact_number_pattern = Pattern.compile(contact_number_pattern_type);
            Matcher contact_number_matcher = contact_number_pattern.matcher(txt_contact_number.getText());
            
            // Email input validation
            String email_pattern_type = "^[a-zA-Z0-9._]{1,50}[@][a-zA-Z]{1,20}[.][a-zA-Z]{2,3}$";
            Pattern email_pattern = Pattern.compile(email_pattern_type);
            Matcher email_matcher = email_pattern.matcher(txt_email.getText());
            
            // Days of stay input validation
            String days_of_stay_pattern_type = "^[0-9]{1,2}$";
            Pattern days_of_stay_pattern = Pattern.compile(days_of_stay_pattern_type);
            Matcher days_of_stay_matcher = days_of_stay_pattern.matcher(txt_days_of_stay.getText());
            
            if (txt_booking_id.getText().equals("") || txt_name.getText().equals("") || txt_ic_passport.getText().equals("") || txt_contact_number.getText().equals("") || txt_email.getText().equals("") || cbo_room_id.getSelectedItem().equals("Select a room...") || txt_days_of_stay.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!booking_id_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 5 for Booking ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!name_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in alphabet only with length \nnot more than 50 for Name!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!ic_passport_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in alphabet or number only with \nlength 12 to 20 for IC / Passport!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!contact_number_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with \nlength 10 to 11 for Contact Number!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!email_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in a proper Email!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!days_of_stay_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 2 for Days of Stay!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (check_in_date.equals(check_out_date)) {
                JOptionPane.showMessageDialog(null, "Check-in date and check-out date cannot be the same!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                try {
                    FileReader file_reader = new FileReader("customer_room_booking.txt");
                    BufferedReader buffered_reader = new BufferedReader(file_reader);

                    String line;
                    String[] line_array;
                    boolean data_exist = false;

                    // Check whether input booking ID, check-in-date, check-out-date, or room ID is existing in text file
                    while ((line = buffered_reader.readLine()) != null) {
                        line_array = line.split("/");

                        if (line_array[0].equals(booking_id) || (line_array[5].equals(check_in_date) && line_array[6].equals(check_out_date) && line_array[7].equals(room_id))) {
                            data_exist = true;
                        }
                    }
                    
                    if (data_exist == true) {
                        JOptionPane.showMessageDialog(null, "Failed to add customer room booking record, either booking ID, check-in date, \ncheck-out date, or room ID is already exist. Please try again.", "Add Failed", JOptionPane.ERROR_MESSAGE);
                    } else if (data_exist == false) {
                        FileWriter file_writer = new FileWriter("customer_room_booking.txt", true);
                        file_writer.write(booking_id + "/" + name + "/" + ic_passport + "/" + contact_number + "/" + email + "/" + check_in_date + "/" + check_out_date + "/" + room_id + "/" + days_of_stay + "\n");
                        file_writer.close();

                        DisplayData();
                        ClearData();

                        JOptionPane.showMessageDialog(null, "New customer room booking record is added successfully.", "Record Added", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error! Failed to add customer room booking record, please try again.", "Add Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_addActionPerformed

    
    // Edit customer room booking record button
    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        try {
            String booking_id = txt_booking_id.getText();
            String name = txt_name.getText();
            String ic_passport = txt_ic_passport.getText();
            String contact_number = txt_contact_number.getText();
            String email = txt_email.getText();
            SimpleDateFormat date_format = new SimpleDateFormat("dd-MM-yyyy");
            String check_in_date = date_format.format(txt_check_in_date.getDate());
            String check_out_date = date_format.format(txt_check_out_date.getDate());
            String room_id = cbo_room_id.getSelectedItem().toString();
            String days_of_stay = txt_days_of_stay.getText();

            // Booking ID input validation
            String booking_id_pattern_type = "^[0-9]{1,5}$";
            Pattern booking_id_pattern = Pattern.compile(booking_id_pattern_type);
            Matcher booking_id_matcher = booking_id_pattern.matcher(txt_booking_id.getText());
            
            // Name input validation
            String name_pattern_type = "^[a-zA-Z. ]{1,50}$";
            Pattern name_pattern = Pattern.compile(name_pattern_type);
            Matcher name_matcher = name_pattern.matcher(txt_name.getText());
        
            // IC / Passport input validation
            String ic_passport_pattern_type = "^[a-zA-Z0-9]{12,20}$";
            Pattern ic_passport_pattern = Pattern.compile(ic_passport_pattern_type);
            Matcher ic_passport_matcher = ic_passport_pattern.matcher(txt_ic_passport.getText());
        
            // Contact number input validation
            String contact_number_pattern_type = "^[0-9]{10,11}$";
            Pattern contact_number_pattern = Pattern.compile(contact_number_pattern_type);
            Matcher contact_number_matcher = contact_number_pattern.matcher(txt_contact_number.getText());
            
            // Email input validation
            String email_pattern_type = "^[a-zA-Z0-9._]{1,50}[@][a-zA-Z]{1,20}[.][a-zA-Z]{2,3}$";
            Pattern email_pattern = Pattern.compile(email_pattern_type);
            Matcher email_matcher = email_pattern.matcher(txt_email.getText());
            
            // Days of stay input validation
            String days_of_stay_pattern_type = "^[0-9]{1,2}$";
            Pattern days_of_stay_pattern = Pattern.compile(days_of_stay_pattern_type);
            Matcher days_of_stay_matcher = days_of_stay_pattern.matcher(txt_days_of_stay.getText());
            
            // Temporary array to hold the data that is read from the file
            ArrayList<String> edit_room_booking_array = new ArrayList<>();

            if (txt_booking_id.getText().equals("") || txt_name.getText().equals("") || txt_ic_passport.getText().equals("") || txt_contact_number.getText().equals("") || txt_email.getText().equals("") || cbo_room_id.getSelectedItem().equals("Select a room...") || txt_days_of_stay.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please select a row and fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!booking_id_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 5 for Booking ID!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!name_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in alphabet only with length \nnot more than 50 for Name!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!ic_passport_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in alphabet or number only with \nlength 12 to 20 for IC / Passport!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!contact_number_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with \nlength 10 to 11 for Contact Number!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!email_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in a proper Email!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (!days_of_stay_matcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 2 for Days of Stay!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else if (check_in_date.equals(check_out_date)) {
                JOptionPane.showMessageDialog(null, "Check-in date and check-out date cannot be the same!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                // Read customer room booking data
                try (FileReader file_reader = new FileReader("customer_room_booking.txt")) {
                    BufferedReader buffered_reader = new BufferedReader(file_reader);
                    String line;
                    String[] line_array;

                    while ((line = buffered_reader.readLine()) != null) {
                        line_array = line.split("/");

                        if (line_array[0].equals(booking_id)) {
                            edit_room_booking_array.add(booking_id + "/" + name + "/" + ic_passport + "/" + contact_number + "/" + email + "/" + check_in_date + "/" + check_out_date + "/" + room_id + "/" + days_of_stay);
                        } else {
                            edit_room_booking_array.add(line);
                        }
                    }

                    file_reader.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error! Failed to read customer room booking data, please try again.", "Error", JOptionPane.ERROR_MESSAGE);
                }

                // Validation & write data
                try {
                    FileReader file_reader = new FileReader("customer_room_booking.txt");
                    BufferedReader buffered_reader = new BufferedReader(file_reader);

                    String line;
                    String[] line_array;
                    boolean data_exist = false;

                    // Check whether input booking ID, check-in date, check-out-date, or room ID is existing in text file
                    while ((line = buffered_reader.readLine()) != null) {
                        line_array = line.split("/");

                        // If booking ID not equals to line_array[0] and check-in-date equals to line_array[5] and check-out-date equals to line_array[6] and room ID equals to line_array[7]
                        if (!line_array[0].equals(booking_id) && (line_array[5].equals(check_in_date) && line_array[6].equals(check_out_date) && line_array[7].equals(room_id))) {
                            data_exist = true;
                        }
                    }

                    if (data_exist == true) {                    
                        JOptionPane.showMessageDialog(null, "Failed to update customer room booking record, either check-in date, \ncheck-out date, or room ID is already exist. Please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                    } else if (data_exist == false) {
                        // Write and update customer room booking data
                        try (PrintWriter print_writer = new PrintWriter("customer_room_booking.txt")) {
                            for (String new_room_booking_data : edit_room_booking_array) {
                                print_writer.println(new_room_booking_data);
                            }

                            print_writer.close();

                            DisplayData();
                            ClearData();

                            JOptionPane.showMessageDialog(null, "Customer room booking record is updated successfully.", "Record Updated", JOptionPane.INFORMATION_MESSAGE);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, "Error! Failed to update customer room booking record, please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch(IOException e) {
                    JOptionPane.showMessageDialog(null, "Error! Failed to update customer room booking record, please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please select a row and fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_editActionPerformed

    
    // Delete customer room booking process
    public static void DeleteCustomerRoomBooking(String remove_term, String delimiter) {
        File old_file = new File("customer_room_booking.txt");
        File new_file = new File("customer_room_booking_temp.txt");
        
        String line;
        String line_array[];
        
        try {
            FileWriter file_writer = new FileWriter(new_file, true);
            BufferedWriter buffered_writer = new BufferedWriter(file_writer);
            PrintWriter print_writer = new PrintWriter(buffered_writer);
            
            FileReader file_reader = new FileReader("customer_room_booking.txt");
            BufferedReader buffered_reader = new BufferedReader(file_reader);
            
            while ((line = buffered_reader.readLine()) != null) {
                line_array = line.split("/");
                
                // If input booking ID equals to line_array[0], the line will be ignored, other lines will be written to a new text file
                if (!(line_array[0].equalsIgnoreCase(remove_term))) {
                    print_writer.println(line);
                }
            }
            
            print_writer.flush();
            print_writer.close();
            file_reader.close();
            buffered_reader.close();
            buffered_writer.close();
            file_writer.close();
            
            old_file.delete();
            File file = new File("customer_room_booking.txt");
            new_file.renameTo(file);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to delete customer room booking record, please try again.", "Delete Failed", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    // Delete customer room booking record button
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        String booking_id = txt_booking_id.getText();
        
        if (txt_booking_id.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please fill in Booking ID to delete customer room booking record!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            if (JOptionPane.showConfirmDialog(null, "Are you sure to delete customer room booking record?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                try {
                    DeleteCustomerRoomBooking(booking_id, "/");

                    DisplayData();
                    ClearData();

                    JOptionPane.showMessageDialog(null, "Customer room booking record is deleted successfully.", "Record Deleted", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error! Failed to delete customer room booking record, please try again.", "Delete Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    
    // Clear data button
    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        ClearData();
    }//GEN-LAST:event_btn_clearActionPerformed

    
    // Refresh data in table button
    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        DisplayData();
    }//GEN-LAST:event_btn_refreshActionPerformed

    
    // Filter table data
    private void Filter(String search_query) {
        DefaultTableModel table_model = (DefaultTableModel)tbl_customer_room_booking.getModel();
        
        TableRowSorter<DefaultTableModel> table_row = new TableRowSorter<>(table_model);
        tbl_customer_room_booking.setRowSorter(table_row);
        
        // Filter data based on input character, number, or symbol
        table_row.setRowFilter(RowFilter.regexFilter(search_query));
    }
    
    
    // Search table row
    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        String search = txt_search.getText();
        
        Filter(search);
    }//GEN-LAST:event_txt_searchKeyReleased

    
    // Table row click
    private void tbl_customer_room_bookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_customer_room_bookingMouseClicked
        int row = tbl_customer_room_booking.getSelectedRow();
        DefaultTableModel table_model = (DefaultTableModel)tbl_customer_room_booking.getModel();
        SimpleDateFormat date_format = new SimpleDateFormat("dd-MM-yyyy");
        
        txt_booking_id.setText(table_model.getValueAt(row, 0).toString());
        txt_name.setText(table_model.getValueAt(row, 1).toString());
        txt_ic_passport.setText(table_model.getValueAt(row, 2).toString());
        txt_contact_number.setText(table_model.getValueAt(row, 3).toString());
        txt_email.setText(table_model.getValueAt(row, 4).toString());
        try {
            Date check_in_date = date_format.parse((String)table_model.getValueAt(row, 5));
            txt_check_in_date.setDate(check_in_date);
            
            Date check_out_date = date_format.parse((String)table_model.getValueAt(row, 6));
            txt_check_out_date.setDate(check_out_date);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to display date, please try again.", "Display Failed", JOptionPane.ERROR_MESSAGE);
        }
        String room_id = table_model.getValueAt(row, 7).toString();
            switch (room_id) {
                case "101":
                    cbo_room_id.setSelectedItem("101");
                    break;
                case "102":
                    cbo_room_id.setSelectedItem("102");
                    break;
                case "103":
                    cbo_room_id.setSelectedItem("103");
                    break;
                case "104":
                    cbo_room_id.setSelectedItem("104");
                    break;
                case "105":
                    cbo_room_id.setSelectedItem("105");
                    break;
                case "106":
                    cbo_room_id.setSelectedItem("106");
                    break;
                case "107":
                    cbo_room_id.setSelectedItem("107");
                    break;
                case "108":
                    cbo_room_id.setSelectedItem("108");
                    break;
                case "109":
                    cbo_room_id.setSelectedItem("109");
                    break;
                case "110":
                    cbo_room_id.setSelectedItem("110");
                    break;
                case "201":
                    cbo_room_id.setSelectedItem("201");
                    break;
                case "202":
                    cbo_room_id.setSelectedItem("202");
                    break;
                case "203":
                    cbo_room_id.setSelectedItem("203");
                    break;
                case "204":
                    cbo_room_id.setSelectedItem("204");
                    break;
                case "205":
                    cbo_room_id.setSelectedItem("205");
                    break;
                case "206":
                    cbo_room_id.setSelectedItem("206");
                    break;
                case "207":
                    cbo_room_id.setSelectedItem("207");
                    break;
                case "208":
                    cbo_room_id.setSelectedItem("208");
                    break;
                case "209":
                    cbo_room_id.setSelectedItem("209");
                    break;
                default:
                    cbo_room_id.setSelectedItem("210");
                    break;
            }
        txt_days_of_stay.setText(table_model.getValueAt(row, 8).toString());
    }//GEN-LAST:event_tbl_customer_room_bookingMouseClicked

    
    // Generate Receipt
    private void btn_generate_receiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generate_receiptActionPerformed
        try {
            SimpleDateFormat date_format = new SimpleDateFormat("dd-MM-yyyy");
            String check_in_date = date_format.format(txt_check_in_date.getDate());
            String check_out_date = date_format.format(txt_check_out_date.getDate());

            // Booking ID input validation
            String booking_id_pattern_type = "^[0-9]{1,5}$";
            Pattern booking_id_pattern = Pattern.compile(booking_id_pattern_type);
            Matcher booking_id_matcher = booking_id_pattern.matcher(txt_booking_id.getText());
            
            // Name input validation
            String name_pattern_type = "^[a-zA-Z. ]{1,50}$";
            Pattern name_pattern = Pattern.compile(name_pattern_type);
            Matcher name_matcher = name_pattern.matcher(txt_name.getText());
        
            // IC / Passport input validation
            String ic_passport_pattern_type = "^[a-zA-Z0-9]{12,20}$";
            Pattern ic_passport_pattern = Pattern.compile(ic_passport_pattern_type);
            Matcher ic_passport_matcher = ic_passport_pattern.matcher(txt_ic_passport.getText());
        
            // Contact number input validation
            String contact_number_pattern_type = "^[0-9]{10,11}$";
            Pattern contact_number_pattern = Pattern.compile(contact_number_pattern_type);
            Matcher contact_number_matcher = contact_number_pattern.matcher(txt_contact_number.getText());
            
            // Email input validation
            String email_pattern_type = "^[a-zA-Z0-9._]{1,50}[@][a-zA-Z]{1,20}[.][a-zA-Z]{2,3}$";
            Pattern email_pattern = Pattern.compile(email_pattern_type);
            Matcher email_matcher = email_pattern.matcher(txt_email.getText());
            
            // Days of stay input validation
            String days_of_stay_pattern_type = "^[0-9]{1,2}$";
            Pattern days_of_stay_pattern = Pattern.compile(days_of_stay_pattern_type);
            Matcher days_of_stay_matcher = days_of_stay_pattern.matcher(txt_days_of_stay.getText());
            
            try {
                if (txt_booking_id.getText().equals("") || txt_name.getText().equals("") || txt_ic_passport.getText().equals("") || txt_contact_number.getText().equals("") || txt_email.getText().equals("") || cbo_room_id.getSelectedItem().equals("Select a room...") || txt_days_of_stay.getText().equals("")) {
                    JOptionPane.showMessageDialog(null, "Please select a customer room booking record to generate receipt!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!booking_id_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 5 for Booking ID!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!name_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in alphabet only with length \nnot more than 50 for Name!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!ic_passport_matcher.matches()) {
                        JOptionPane.showMessageDialog(null, "Please fill in alphabet or number only with \nlength 12 to 20 for IC / Passport!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!contact_number_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in number only with \nlength 10 to 11 for Contact Number!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!email_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in a proper Email!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (!days_of_stay_matcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 2 for Days of Stay!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else if (check_in_date.equals(check_out_date)) {
                    JOptionPane.showMessageDialog(null, "Check-in date and check-out date cannot be the same!", "Warning", JOptionPane.WARNING_MESSAGE);
                } else {
                    Date current_date = new Date();
                    String date = current_date.toString();

                    DecimalFormat decimal_format = new DecimalFormat("#.##");
                    decimal_format.setRoundingMode(RoundingMode.HALF_UP);

                    double room_charges = 350 * Integer.parseInt(txt_days_of_stay.getText());
                    double service_tax = room_charges * 10 / 100;
                    double tourism_tax = 10 * Integer.parseInt(txt_days_of_stay.getText());
                    double grand_total = room_charges + service_tax + tourism_tax;

                    txt_receipt.setText("**************************************************\n");
                    txt_receipt.setText(txt_receipt.getText() + "                      Atlantis Hotel\n");
                    txt_receipt.setText(txt_receipt.getText() + "              Room Booking Receipt\n");
                    txt_receipt.setText(txt_receipt.getText() + "**************************************************\n");
                    txt_receipt.setText(txt_receipt.getText() + date + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Customer Name: " + txt_name.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "IC/Passport: " + txt_ic_passport.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Contact Number: " + txt_contact_number.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Email: " + txt_email.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Check-In Date: " + check_in_date + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Check-Out Date: " + check_out_date + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Booked Room: " + cbo_room_id.getSelectedItem() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Room Charges: RM " + decimal_format.format(room_charges) + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Service Tax: RM " + decimal_format.format(service_tax) + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "Tourism Tax: RM " + decimal_format.format(tourism_tax) + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "--------------------------------------------------\n");
                    txt_receipt.setText(txt_receipt.getText() + "Grand Total: RM " + decimal_format.format(grand_total) + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "\n");
                    txt_receipt.setText(txt_receipt.getText() + "**************************************************\n");
                    txt_receipt.setText(txt_receipt.getText() + "   Thank you for staying in Atlantis Hotel!\n");
                    txt_receipt.setText(txt_receipt.getText() + "**************************************************");

                    ClearData();
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error! Failed to generate customer room booking receipt, please try again.", "Generate Receipt Failed", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please select a customer room booking record to generate receipt!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btn_generate_receiptActionPerformed

    
    // Print receipt
    private void btn_print_receiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_print_receiptActionPerformed
        try {
            if (txt_receipt.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please select a customer room booking record to generate and print receipt!", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                txt_receipt.print();
            }
        } catch (PrinterException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to print customer room booking receipt, please try again.", "Print Failed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_print_receiptActionPerformed

    
    // Clear receipt
    private void btn_clear_receiptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clear_receiptActionPerformed
        txt_receipt.setText("");
    }//GEN-LAST:event_btn_clear_receiptActionPerformed

    
    // Logout menu item
    private void menu_item_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_logoutActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure to logout?", "Confirm Logout", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            Login login = new Login();
            this.setVisible(false); 
        }
    }//GEN-LAST:event_menu_item_logoutActionPerformed
 
    
    // Main method
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageRoomBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageRoomBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageRoomBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageRoomBooking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageRoomBooking().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_clear_receipt;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_generate_receipt;
    private javax.swing.JButton btn_print_receipt;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JComboBox<String> cbo_room_id;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_atlantis_hotel;
    private javax.swing.JLabel lbl_booking_id;
    private javax.swing.JLabel lbl_check_in_date;
    private javax.swing.JLabel lbl_check_out_date;
    private javax.swing.JLabel lbl_contact_number;
    private javax.swing.JLabel lbl_days_of_stay;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_hotel_room_booking_system;
    private javax.swing.JLabel lbl_ic_passport;
    private javax.swing.JLabel lbl_manage_room_booking;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_room_id;
    private javax.swing.JLabel lbl_search;
    private javax.swing.JLabel lbl_welcome_back_staff;
    private javax.swing.JMenuItem menu_item_logout;
    private javax.swing.JMenu menu_navigate;
    private javax.swing.JPanel pnl_1;
    private javax.swing.JPanel pnl_2;
    private javax.swing.JPanel pnl_3;
    private javax.swing.JMenuBar staff_menu_bar;
    private javax.swing.JTable tbl_customer_room_booking;
    private javax.swing.JTextField txt_booking_id;
    private com.toedter.calendar.JDateChooser txt_check_in_date;
    private com.toedter.calendar.JDateChooser txt_check_out_date;
    private javax.swing.JTextField txt_contact_number;
    private javax.swing.JTextField txt_days_of_stay;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_ic_passport;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextArea txt_receipt;
    private javax.swing.JTextField txt_search;
    // End of variables declaration//GEN-END:variables
}
