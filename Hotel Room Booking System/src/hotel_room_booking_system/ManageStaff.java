package hotel_room_booking_system;

import java.io.*;
import java.util.*;
import java.util.regex.*;
import javax.swing.*;
import javax.swing.table.*;

public class ManageStaff extends javax.swing.JFrame {
    
    /**
     * Creates new form manage_staff
     */
    public ManageStaff() {
        initComponents();
        DisplayData();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        pnl_1 = new javax.swing.JPanel();
        lbl_atlantis_hotel = new javax.swing.JLabel();
        lbl_hotel_room_booking_system = new javax.swing.JLabel();
        lbl_manage_staff = new javax.swing.JLabel();
        lbl_welcome_back_admin = new javax.swing.JLabel();
        pnl_2 = new javax.swing.JPanel();
        txt_staff_id = new javax.swing.JTextField();
        lbl_staff_id = new javax.swing.JLabel();
        lbl_name = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        lbl_contact_number = new javax.swing.JLabel();
        txt_contact_number = new javax.swing.JTextField();
        lbl_email = new javax.swing.JLabel();
        txt_email = new javax.swing.JTextField();
        lbl_password = new javax.swing.JLabel();
        txt_password = new javax.swing.JPasswordField();
        lbl_address = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_address = new javax.swing.JTextArea();
        lbl_user_role = new javax.swing.JLabel();
        cbo_user_role = new javax.swing.JComboBox<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbl_staff = new javax.swing.JTable();
        btn_refresh = new javax.swing.JButton();
        rad_male = new javax.swing.JRadioButton();
        rad_female = new javax.swing.JRadioButton();
        lbl_gender = new javax.swing.JLabel();
        txt_search = new javax.swing.JTextField();
        lbl_search = new javax.swing.JLabel();
        pnl_3 = new javax.swing.JPanel();
        btn_add = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        admin_menu_bar = new javax.swing.JMenuBar();
        menu_navigate = new javax.swing.JMenu();
        menu_item_logout = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin - Manage Staff");
        setName("manage_staff"); // NOI18N
        setResizable(false);

        pnl_1.setBackground(new java.awt.Color(49, 68, 85));
        pnl_1.setToolTipText("");

        lbl_atlantis_hotel.setFont(new java.awt.Font("Palatino", 1, 36)); // NOI18N
        lbl_atlantis_hotel.setForeground(new java.awt.Color(255, 255, 255));
        lbl_atlantis_hotel.setText("Atlantis Hotel");

        lbl_hotel_room_booking_system.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lbl_hotel_room_booking_system.setForeground(new java.awt.Color(255, 255, 255));
        lbl_hotel_room_booking_system.setText("Hotel Room Booking System");

        lbl_manage_staff.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lbl_manage_staff.setForeground(new java.awt.Color(255, 255, 255));
        lbl_manage_staff.setText("Manage Staff");

        lbl_welcome_back_admin.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        lbl_welcome_back_admin.setForeground(new java.awt.Color(255, 255, 255));
        lbl_welcome_back_admin.setText("Welcome back, admin!");

        javax.swing.GroupLayout pnl_1Layout = new javax.swing.GroupLayout(pnl_1);
        pnl_1.setLayout(pnl_1Layout);
        pnl_1Layout.setHorizontalGroup(
            pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_1Layout.createSequentialGroup()
                        .addComponent(lbl_atlantis_hotel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_welcome_back_admin))
                    .addGroup(pnl_1Layout.createSequentialGroup()
                        .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_manage_staff)
                            .addComponent(lbl_hotel_room_booking_system))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_1Layout.setVerticalGroup(
            pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_atlantis_hotel)
                    .addComponent(lbl_welcome_back_admin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_hotel_room_booking_system)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_manage_staff)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_2.setBackground(new java.awt.Color(158, 90, 99));

        txt_staff_id.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lbl_staff_id.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_staff_id.setForeground(new java.awt.Color(255, 255, 255));
        lbl_staff_id.setText("Staff ID:");

        lbl_name.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_name.setForeground(new java.awt.Color(255, 255, 255));
        lbl_name.setText("Name:");

        txt_name.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_name.setPreferredSize(new java.awt.Dimension(200, 40));

        lbl_contact_number.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_contact_number.setForeground(new java.awt.Color(255, 255, 255));
        lbl_contact_number.setText("Contact Number:");

        txt_contact_number.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_contact_number.setPreferredSize(new java.awt.Dimension(200, 40));

        lbl_email.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_email.setForeground(new java.awt.Color(255, 255, 255));
        lbl_email.setText("Email:");

        txt_email.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_email.setPreferredSize(new java.awt.Dimension(200, 40));

        lbl_password.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_password.setForeground(new java.awt.Color(255, 255, 255));
        lbl_password.setText("Password:");

        txt_password.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N

        lbl_address.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_address.setForeground(new java.awt.Color(255, 255, 255));
        lbl_address.setText("Address:");

        txt_address.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_address.setRows(5);
        txt_address.setSize(new java.awt.Dimension(200, 80));
        jScrollPane3.setViewportView(txt_address);

        lbl_user_role.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_user_role.setForeground(new java.awt.Color(255, 255, 255));
        lbl_user_role.setText("User Role:");

        cbo_user_role.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cbo_user_role.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select user role...", "Admin", "Staff" }));

        tbl_staff.setBackground(new java.awt.Color(229, 229, 229));
        tbl_staff.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tbl_staff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tbl_staff.setRowHeight(30);
        tbl_staff.setSelectionBackground(new java.awt.Color(0, 102, 153));
        tbl_staff.getTableHeader().setReorderingAllowed(false);
        tbl_staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_staffMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tbl_staff);

        btn_refresh.setBackground(new java.awt.Color(255, 255, 255));
        btn_refresh.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        rad_male.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        rad_male.setForeground(new java.awt.Color(255, 255, 255));
        rad_male.setText("Male");
        rad_male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rad_maleActionPerformed(evt);
            }
        });

        rad_female.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        rad_female.setForeground(new java.awt.Color(255, 255, 255));
        rad_female.setText("Female");
        rad_female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rad_femaleActionPerformed(evt);
            }
        });

        lbl_gender.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_gender.setForeground(new java.awt.Color(255, 255, 255));
        lbl_gender.setText("Gender:");

        txt_search.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_searchKeyReleased(evt);
            }
        });

        lbl_search.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        lbl_search.setForeground(new java.awt.Color(255, 255, 255));
        lbl_search.setText("Search:");

        javax.swing.GroupLayout pnl_2Layout = new javax.swing.GroupLayout(pnl_2);
        pnl_2.setLayout(pnl_2Layout);
        pnl_2Layout.setHorizontalGroup(
            pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_staff_id)
                    .addComponent(lbl_name)
                    .addComponent(lbl_contact_number)
                    .addComponent(lbl_email)
                    .addComponent(lbl_password)
                    .addComponent(lbl_gender)
                    .addComponent(lbl_user_role)
                    .addComponent(lbl_address))
                .addGap(18, 18, 18)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnl_2Layout.createSequentialGroup()
                                .addComponent(rad_male)
                                .addGap(18, 18, 18)
                                .addComponent(rad_female))
                            .addComponent(txt_contact_number, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbo_user_role, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_staff_id, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_2Layout.createSequentialGroup()
                                .addComponent(lbl_search)
                                .addGap(18, 18, 18)
                                .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnl_2Layout.setVerticalGroup(
            pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_staff_id, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_staff_id)
                    .addComponent(btn_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_2Layout.createSequentialGroup()
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_name))
                        .addGap(12, 12, 12)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(rad_male)
                                .addComponent(rad_female))
                            .addComponent(lbl_gender))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_contact_number, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_contact_number))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_email))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_password, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_password))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_address))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnl_2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbo_user_role, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_user_role)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnl_3.setBackground(new java.awt.Color(100, 78, 91));

        btn_add.setBackground(new java.awt.Color(255, 255, 255));
        btn_add.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_add.setText("Add");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        btn_edit.setBackground(new java.awt.Color(255, 255, 255));
        btn_edit.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_edit.setText("Edit");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setBackground(new java.awt.Color(255, 255, 255));
        btn_delete.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_clear.setBackground(new java.awt.Color(255, 255, 255));
        btn_clear.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_3Layout = new javax.swing.GroupLayout(pnl_3);
        pnl_3.setLayout(pnl_3Layout);
        pnl_3Layout.setHorizontalGroup(
            pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_3Layout.setVerticalGroup(
            pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnl_3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        menu_navigate.setText("File");

        menu_item_logout.setText("Logout");
        menu_item_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_item_logoutActionPerformed(evt);
            }
        });
        menu_navigate.add(menu_item_logout);

        admin_menu_bar.add(menu_navigate);

        setJMenuBar(admin_menu_bar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnl_3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnl_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Create file if file does not exist
    private void CreateFile() {
        try {
            FileWriter file_writer = new FileWriter("staff.txt", true);
            file_writer.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to create new file, please try again.", "Create Failed", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    // Display staff data to table
    private void DisplayData() {
        try {
            CreateFile();
            
            FileReader file_reader = new FileReader("staff.txt");
            BufferedReader buffered_reader = new BufferedReader(file_reader);

            // Set column
            Object[] columns = {"Staff ID", "Name", "Gender", "Contact Number", "Email", "Password", "Address", "User Role"};
            DefaultTableModel table_model = (DefaultTableModel)tbl_staff.getModel();
            table_model.setColumnIdentifiers(columns);
            tbl_staff.setModel(table_model);

            Object[] data_row = buffered_reader.lines().toArray();
            table_model.setRowCount(0);

            // Loop and display data
            for (int staff_data = 0; staff_data < data_row.length; staff_data++) {
                String row = data_row[staff_data].toString();
                String[] data = row.split("/");
                table_model.addRow(data);
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to display staff record, please try again.", "Display Failed", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    // Clear all data in textfields, radiobutton & combobox
    private void ClearData() {
        txt_staff_id.setText("");
        txt_name.setText("");
        rad_male.setSelected(false);
        rad_female.setSelected(false);
        txt_contact_number.setText("");
        txt_email.setText("");
        txt_password.setText("");
        txt_address.setText("");
        cbo_user_role.setSelectedIndex(0);
        txt_search.setText("");
    }
    
    
    // Add staff record button
    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        String staff_id = txt_staff_id.getText();
        String name = txt_name.getText();
        String gender = "";
            if (rad_male.isSelected()) {
                gender = "Male";
            } else {
                gender = "Female";
            }
        String contact_number = txt_contact_number.getText();
        String email = txt_email.getText();
        String password = new String(txt_password.getPassword());
        String address = txt_address.getText();
        String user_role = cbo_user_role.getSelectedItem().toString();
        
        // Staff ID input validation
        String staff_id_pattern_type = "^[0-9]{1,3}$";
        Pattern staff_id_pattern = Pattern.compile(staff_id_pattern_type);
        Matcher staff_id_matcher = staff_id_pattern.matcher(txt_staff_id.getText());
        
        // Name input validation
        String name_pattern_type = "^[a-zA-Z. ]{1,50}$";
        Pattern name_pattern = Pattern.compile(name_pattern_type);
        Matcher name_matcher = name_pattern.matcher(txt_name.getText());

        // Contact number input validation
        String contact_number_pattern_type = "^[0-9]{10,11}$";
        Pattern contact_number_pattern = Pattern.compile(contact_number_pattern_type);
        Matcher contact_number_matcher = contact_number_pattern.matcher(txt_contact_number.getText());
        
        // Email input validation
        String email_pattern_type = "^[a-zA-Z0-9._]{1,50}[@][a-zA-Z]{1,20}[.][a-zA-Z]{2,3}$";
        Pattern email_pattern = Pattern.compile(email_pattern_type);
        Matcher email_matcher = email_pattern.matcher(txt_email.getText());
        
        if (txt_staff_id.getText().equals("") || txt_name.getText().equals("") || (!rad_male.isSelected() && !rad_female.isSelected()) || txt_contact_number.getText().equals("") || txt_email.getText().equals("") || txt_password.getPassword().length == 0 || txt_address.getText().equals("") || cbo_user_role.getSelectedItem().equals("Select user role...")) {
           JOptionPane.showMessageDialog(null, "Please fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!staff_id_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 3 for Staff ID!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!name_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in alphabet only with length \nnot more than 50 for Name!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!contact_number_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in number only with \nlength 10 to 11 for Contact Number!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!email_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in a proper Email!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                FileReader file_reader = new FileReader("staff.txt");
                BufferedReader buffered_reader = new BufferedReader(file_reader);

                String line;
                String[] line_array;
                boolean data_exist = false;
                
                // Check whether input staff ID, contact number, or email is existing in text file
                while ((line = buffered_reader.readLine()) != null) {
                    line_array = line.split("/");
                    
                    if (line_array[0].equals(staff_id) || line_array[3].equals(contact_number) || line_array[4].equals(email)) {
                        data_exist = true;
                    } 
                }

                if (data_exist == true) {                    
                    JOptionPane.showMessageDialog(null, "Failed to add staff record, either staff ID, contact number, or \nemail is already exist. Please try again.", "Add Failed", JOptionPane.ERROR_MESSAGE);
                } else if (data_exist == false) {
                    FileWriter file_writer = new FileWriter("staff.txt", true);
                    file_writer.write(staff_id + "/" + name + "/" + gender + "/" + contact_number + "/" + email + "/" + password + "/" + address + "/" + user_role + "\n");
                    file_writer.close();

                    DisplayData();
                    ClearData();

                    JOptionPane.showMessageDialog(null, "New staff record is added successfully.", "Record Added", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error! Failed to add staff record, please try again.", "Add Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_addActionPerformed
   
    
    // Edit staff record button
    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        String staff_id = txt_staff_id.getText();
        String name = txt_name.getText();
        String gender = "";
            if (rad_male.isSelected()) {
                gender = "Male";
            } else {
                gender = "Female";
            }
        String contact_number = txt_contact_number.getText();
        String email = txt_email.getText();
        String password = new String(txt_password.getPassword());
        String address = txt_address.getText();
        String user_role = cbo_user_role.getSelectedItem().toString();

        // Staff ID input validation
        String staff_id_pattern_type = "^[0-9]{1,3}$";
        Pattern staff_id_pattern = Pattern.compile(staff_id_pattern_type);
        Matcher staff_id_matcher = staff_id_pattern.matcher(txt_staff_id.getText());
        
        // Name input validation
        String name_pattern_type = "^[a-zA-Z. ]{1,50}$";
        Pattern name_pattern = Pattern.compile(name_pattern_type);
        Matcher name_matcher = name_pattern.matcher(txt_name.getText());

        // Contact number input validation
        String contact_number_pattern_type = "^[0-9]{10,11}$";
        Pattern contact_number_pattern = Pattern.compile(contact_number_pattern_type);
        Matcher contact_number_matcher = contact_number_pattern.matcher(txt_contact_number.getText());
        
        // Email input validation
        String email_pattern_type = "^[a-zA-Z0-9._]{1,50}[@][a-zA-Z]{1,20}[.][a-zA-Z]{2,3}$";
        Pattern email_pattern = Pattern.compile(email_pattern_type);
        Matcher email_matcher = email_pattern.matcher(txt_email.getText());
        
        // Temporary array to hold the data that is read from the file
        ArrayList<String> edit_staff_array = new ArrayList<>();
        
        if (txt_staff_id.getText().equals("") || txt_name.getText().equals("") || (!rad_male.isSelected() && !rad_female.isSelected()) || txt_contact_number.getText().equals("") || txt_email.getText().equals("") || txt_password.getPassword().length == 0 || txt_address.getText().equals("") || cbo_user_role.getSelectedItem().equals("Select user role...")) {
            JOptionPane.showMessageDialog(null, "Please select a row and fill in all details!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!staff_id_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in number only with length \nnot more than 3 for Staff ID!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!name_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in alphabet only with length \nnot more than 50 for Name!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!contact_number_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in number only with \nlength 10 to 11 for Contact Number!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!email_matcher.matches()) {
            JOptionPane.showMessageDialog(null, "Please fill in a proper Email!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            // Read staff data
            try {
                FileReader file_reader = new FileReader("staff.txt");
                BufferedReader buffered_reader = new BufferedReader(file_reader);
                
                String line;
                String[] line_array;

                while ((line = buffered_reader.readLine()) != null) {
                    line_array = line.split("/");

                    if (line_array[0].equals(staff_id)) {
                        edit_staff_array.add(staff_id + "/" + name + "/" + gender + "/" + contact_number + "/" + email + "/" + password + "/" + address + "/" + user_role);
                    } else {
                        edit_staff_array.add(line);
                    }
                }

                file_reader.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error! Failed to read staff data, please try again.", "Read Failed", JOptionPane.ERROR_MESSAGE);
            }
            
            // Validation & write data
            try {
                FileReader file_reader = new FileReader("staff.txt");
                BufferedReader buffered_reader = new BufferedReader(file_reader);

                String line;
                String[] line_array;
                boolean data_exist = false;
                
                // Check whether input staff ID, contact number, or email is existing in text file
                while ((line = buffered_reader.readLine()) != null) {
                    line_array = line.split("/");
                    
                    // If staff ID not equals to line_array[0] and contact number equals to line_array[3] or email equals to line_array[4]
                    if (!line_array[0].equals(staff_id) && (line_array[3].equals(contact_number) || line_array[4].equals(email))) {
                        data_exist = true;
                    }
                }

                if (data_exist == true) {                    
                    JOptionPane.showMessageDialog(null, "Failed to update staff record, either contact number or \nemail is already exist. Please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                } else if (data_exist == false) {
                    // Write and update staff data
                    try (PrintWriter print_writer = new PrintWriter("staff.txt")) {
                        for (String new_staff_data : edit_staff_array) {
                            print_writer.println(new_staff_data);
                        }

                        print_writer.close();

                        DisplayData();
                        ClearData();

                        JOptionPane.showMessageDialog(null, "Staff record is updated successfully.", "Record Updated", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(null, "Error! Failed to update staff record, please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch(IOException e) {
                JOptionPane.showMessageDialog(null, "Error! Failed to update staff record, please try again.", "Update Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_editActionPerformed

    
    // Delete staff process
    public static void DeleteStaff(String remove_term, String delimiter) {
        File old_file = new File("staff.txt");
        File new_file = new File("staff_temp.txt");
        
        String line;
        String line_array[];
        
        try {
            FileWriter file_writer = new FileWriter(new_file, true);
            BufferedWriter buffered_writer = new BufferedWriter(file_writer);
            PrintWriter print_writer = new PrintWriter(buffered_writer);
            
            FileReader file_reader = new FileReader("staff.txt");
            BufferedReader buffered_reader = new BufferedReader(file_reader);
            
            while ((line = buffered_reader.readLine()) != null) {
                line_array = line.split("/");
                
                // If input staff ID equals to line_array[0], the line will be ignored, other lines will be written to a new text file
                if (!(line_array[0]).equalsIgnoreCase(remove_term)) {
                    print_writer.println(line);
                }
            }
            
            print_writer.flush();
            print_writer.close();
            file_reader.close();
            buffered_reader.close();
            buffered_writer.close();
            file_writer.close();
            
            old_file.delete();
            File file = new File("staff.txt");
            new_file.renameTo(file);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error! Failed to delete staff record, please try again.", "Delete Failed", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    // Delete staff record button
    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        String staff_id = txt_staff_id.getText();
        
        if (txt_staff_id.getText().equals("")) {
           JOptionPane.showMessageDialog(null, "Please fill in Staff ID to delete staff record!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            if (JOptionPane.showConfirmDialog(null, "Are you sure to delete staff record?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                try {
                    DeleteStaff(staff_id, "/");

                    DisplayData();
                    ClearData();

                    JOptionPane.showMessageDialog(null, "Staff record is deleted successfully.", "Record Deleted", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error! Failed to delete staff record, please try again.", "Delete Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    
    // Clear data button
    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed
        ClearData();
    }//GEN-LAST:event_btn_clearActionPerformed

    
    // Refresh data in table button
    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        DisplayData();
    }//GEN-LAST:event_btn_refreshActionPerformed

    
    // Filter table data
    private void Filter(String search_query) {
        DefaultTableModel table_model = (DefaultTableModel)tbl_staff.getModel();
        
        TableRowSorter<DefaultTableModel> table_row = new TableRowSorter<>(table_model);
        tbl_staff.setRowSorter(table_row);
        
        // Filter data based on input character, number, or symbol
        table_row.setRowFilter(RowFilter.regexFilter(search_query));
    }
    
    
    // Search table row
    private void txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_searchKeyReleased
        String search = txt_search.getText();
        
        Filter(search);
    }//GEN-LAST:event_txt_searchKeyReleased

    
    // Table row click
    private void tbl_staffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_staffMouseClicked
        int row = tbl_staff.getSelectedRow();
        DefaultTableModel table_model = (DefaultTableModel)tbl_staff.getModel();
        
        txt_staff_id.setText(table_model.getValueAt(row, 0).toString());
        txt_name.setText(table_model.getValueAt(row, 1).toString());
        String gender = table_model.getValueAt(row, 2).toString();
            if (gender.equals("Male")) {
                rad_male.setSelected(true);
                rad_female.setSelected(false);
            } else {
                rad_female.setSelected(true);
                rad_male.setSelected(false);

            }
        txt_contact_number.setText(table_model.getValueAt(row, 3).toString());
        txt_email.setText(table_model.getValueAt(row, 4).toString());
        txt_password.setText(table_model.getValueAt(row, 5).toString());
        txt_address.setText(table_model.getValueAt(row, 6).toString());
        String user_role = table_model.getValueAt(row, 7).toString();
            switch (user_role) {
                case "Admin":
                    cbo_user_role.setSelectedItem("Admin");
                    break;
                default:
                    cbo_user_role.setSelectedItem("Staff");
                    break;
            }
    }//GEN-LAST:event_tbl_staffMouseClicked

    
    // Male radiobutton input validation
    private void rad_maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rad_maleActionPerformed
        if (rad_male.isSelected()) {
            rad_female.setSelected(false);
        }
    }//GEN-LAST:event_rad_maleActionPerformed

    
    // Female radiobutton input validation
    private void rad_femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rad_femaleActionPerformed
        if (rad_female.isSelected()) {
            rad_male.setSelected(false);
        }
    }//GEN-LAST:event_rad_femaleActionPerformed

    
    // Logout menu item
    private void menu_item_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_item_logoutActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure to logout?", "Confirm Logout", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            Login login = new Login();
            this.setVisible(false);
        }
    }//GEN-LAST:event_menu_item_logoutActionPerformed

    
    // Main method
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageStaff().setVisible(true);
            }
        });   
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar admin_menu_bar;
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JComboBox<String> cbo_user_role;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbl_address;
    private javax.swing.JLabel lbl_atlantis_hotel;
    private javax.swing.JLabel lbl_contact_number;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_hotel_room_booking_system;
    private javax.swing.JLabel lbl_manage_staff;
    private javax.swing.JLabel lbl_name;
    private javax.swing.JLabel lbl_password;
    private javax.swing.JLabel lbl_search;
    private javax.swing.JLabel lbl_staff_id;
    private javax.swing.JLabel lbl_user_role;
    private javax.swing.JLabel lbl_welcome_back_admin;
    private javax.swing.JMenuItem menu_item_logout;
    private javax.swing.JMenu menu_navigate;
    private javax.swing.JPanel pnl_1;
    private javax.swing.JPanel pnl_2;
    private javax.swing.JPanel pnl_3;
    private javax.swing.JRadioButton rad_female;
    private javax.swing.JRadioButton rad_male;
    private javax.swing.JTable tbl_staff;
    private javax.swing.JTextArea txt_address;
    private javax.swing.JTextField txt_contact_number;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_name;
    private javax.swing.JPasswordField txt_password;
    private javax.swing.JTextField txt_search;
    private javax.swing.JTextField txt_staff_id;
    // End of variables declaration//GEN-END:variables
   }
